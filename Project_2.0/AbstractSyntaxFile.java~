import java.util.*;

abstract class ExpressionFile {
    abstract double eval(ValueEnvironmentFile env)
    throws Exception; 
}
class IntFile extends ExpressionFile {
	private double value;
	public IntFile(double i) {
		value = i;
	}
	public double eval(ValueEnvironmentFile env) throws Exception {
		return value;
	}
}
class VarFile extends ExpressionFile {
	private String name;
	public VarFile(String s) {
		name = s;
	}
	public double eval(ValueEnvironmentFile env) throws Exception {
		return env.getValue(name);
	}
}
class SumFile extends ExpressionFile {
	private ExpressionFile left, right;
	public SumFile(ExpressionFile l, ExpressionFile r) {
		left = l;
		right = r;
	}
	public double eval(ValueEnvironmentFile env) throws Exception {
		return left.eval(env)+right.eval(env);
	}
}
class DifferenceFile extends ExpressionFile {
	private ExpressionFile left, right;
	public DifferenceFile(ExpressionFile l, ExpressionFile r) throws Exception {
		left = l;
		right = r;
	}
	public double eval(ValueEnvironmentFile env) throws Exception{
		return left.eval(env)-right.eval(env);
	}
}
class ProductFile extends ExpressionFile {
	private ExpressionFile left, right;
	public ProductFile(ExpressionFile l, ExpressionFile r) {
		left = l;
		right = r;
	}
	public double eval(ValueEnvironmentFile env) throws Exception {
		return left.eval(env)*right.eval(env);
	}
}
class DivisionFile extends ExpressionFile {
	private ExpressionFile left, right;
	public DivisionFile(ExpressionFile l, ExpressionFile r) {
		left = l;
		right = r;
	}
	public double eval(ValueEnvironmentFile env) throws Exception {
		//Division par 0
		if(right.eval(env)==0){
			System.out.println("Erreur division par 0!!");
			throw new Exception("Erreur division par 0!!");
		} else {
			return left.eval(env)/right.eval(env);
		}
	}
}

class ProgramFile {
	private BlocDeclFile first;
	private InstructionFile rest;
	public ProgramFile(BlocDeclFile d, InstructionFile i) {
		first = d;
		rest = i;
	}
	public void run(ValueEnvironmentFile env, DrawPanel dp)
	throws Exception {
		if (first != null) {
			first.exec(env, dp);
			if(rest != null){
				rest.exec(env, dp);
			}
		}
	} 
}

abstract class InstructionFile {
	abstract void exec(ValueEnvironmentFile env, DrawPanel dp)
	throws Exception;
}
class DeclarationFile extends InstructionFile {
	private String varName;
	public DeclarationFile(String s) {
		varName = s;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) 
	throws Exception {
		try{
			env.addVariable(varName);
		} catch(Exception e) {
			throw new Exception();
		}
	} 
}
class AssignmentFile extends InstructionFile {
	private String varName;
	private ExpressionFile exp;
	public AssignmentFile(String s, ExpressionFile e) {
		varName = s;
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp)
	throws Exception {
		try{
			env.setVariable(varName, exp.eval(env));
		} catch(Exception e) {
			throw new Exception();
		}
	}
}

class MoveFile extends InstructionFile {
	private ExpressionFile exp;
	public MoveFile(ExpressionFile e){
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		dp.move(exp.eval(env));
	}
}

class TurnFile extends InstructionFile {
	private ExpressionFile exp;
	public TurnFile(ExpressionFile e){
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		//dp.setAngle();
		dp.turnAngle(exp.eval(env));
	}
}

class ColorFile extends InstructionFile {
	private ExpressionFile exp;
	public ColorFile(ExpressionFile e){
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		//setColor pas encore définie
		dp.setColor((int)exp.eval(env));
	}
}

class SizeFile extends InstructionFile {
	private ExpressionFile exp;
	public SizeFile(ExpressionFile e){
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		dp.setSize((int)exp.eval(env));
	}
}

class IfFile extends InstructionFile {
	private ExpressionFile exp;
	private InstructionFile inst;
	public IfFile(ExpressionFile e, InstructionFile i){
		exp=e;
		inst=i;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(exp.eval(env)==0){
			inst.exec(env, dp);
		}
	}
}

class IfElseFile extends InstructionFile {
	private ExpressionFile exp;
	private InstructionFile inst;
	private InstructionFile alt;
	public IfElseFile(ExpressionFile e, InstructionFile i, InstructionFile a){
		exp=e;
		inst=i;
		alt=a;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(exp.eval(env)==0){
			inst.exec(env, dp);
		} else {
			alt.exec(env, dp);
		}
	}
}

class ForFile extends InstructionFile {
	private ExpressionFile exp;
	private InstructionFile inst;
	public ForFile(ExpressionFile e, InstructionFile i){
		exp=e;
		inst=i;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(exp.eval(env)>0){
			for(int i=0; i<exp.eval(env); i++){
				inst.exec(env, dp);
			}
		} else {
			throw new Exception("Condition de boucle POUR non valide (inférieure ou égale à 0)");
		}
	}
}

class WhileFile extends InstructionFile {
	private ExpressionFile exp;
	private InstructionFile inst;
	public WhileFile(ExpressionFile e, InstructionFile i){
		exp=e;
		inst=i;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		while(exp.eval(env)!=0){
			inst.exec(env, dp);
		}
	}
}

class PositionFile extends InstructionFile {
	private boolean canDraw;
	public PositionFile(boolean b){
		canDraw = b;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		dp.setCanDraw(this.canDraw);
	}
}

class ModeFile extends InstructionFile {
	private ExpressionFile exp;
	public ModeFile(ExpressionFile e){
		exp = e;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(exp.eval(env)==90){
			dp.setMode(true);
		} else {
			dp.setMode(false);
		}
	}
}

class BlocInstFile extends InstructionFile {
	private InstructionFile first;
	private BlocInstFile rest;
	public BlocInstFile(InstructionFile inst, BlocInst bloc) throws Exception {
		first = inst;
		rest = bloc;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(first!=null){
			first.exec(env, dp);
			if(rest!=null){
				rest.exec(env, dp);
			}
		}
	}
}

class BlocDeclFile{
	private DeclarationFile first;
	private BlocDeclFile rest;
	public BlocDeclFile(DeclarationFile decl, BlocDeclFile bloc){
		first = decl;
		rest = bloc;
	}
	public void exec(ValueEnvironmentFile env, DrawPanel dp) throws Exception {
		if(first!=null){
			first.exec(env, dp);
			if(rest!=null){
				rest.exec(env, dp);
			}
		}
	}
}

class ValueEnvironmentFile extends HashMap<String, Double> {
	public ValueEnvironmentFile() {
		super();
	}
	public void addVariable(String name) 
	throws Exception {
		this.put(name, 0.0);
	}
	public void setVariable(String name, double value) 
	throws Exception {
		this.put(name, value);
	}
	public double getValue(String name) 
	throws Exception {
		return this.get(name);
	}
}
